/**
 * AI Insights Daily - Main Page Component
 * 
 * This is the primary page component for the AI Insights Daily website.
 * It displays a chronological feed of daily AI tools and news updates,
 * automatically generated from the backend discovery system.
 * 
 * Key Features:
 * - Responsive design with dark/light mode support
 * - Chronological display of daily updates
 * - Automatic grouping of news and tools by date
 * - Collapsible sections for better UX
 * - SEO-optimized structure
 * 
 * The component processes content from the data/content.ts file,
 * which is automatically generated by the Python backend scripts.
 * 
 * Author: AI Insights Daily Team
 * Version: 3.1.0
 * Last Updated: June 2025
 */

"use client";

import React, { useState } from 'react';
import { content } from '../data/content';

// Reusable Collapsible Section Component
const CollapsibleSection = ({ title, children, defaultCollapsed = false }: { title: string; children: React.ReactNode; defaultCollapsed?: boolean }) => {
  const [isCollapsed, setIsCollapsed] = useState(defaultCollapsed);
  const toggle = () => setIsCollapsed(!isCollapsed);

  return (
    <div style={styles.section}>
      <div style={styles.sectionHeader} onClick={toggle}>
        <span>{title}</span>
        <span style={{ transform: isCollapsed ? 'rotate(-90deg)' : 'rotate(0)', transition: 'transform 0.3s ease' }}>▼</span>
      </div>
      <div style={{...styles.sectionContent, ...(isCollapsed ? styles.collapsedContent : {})}}>
        {children}
      </div>
    </div>
  );
};

// Helper to get unique dates in descending order
const getUniqueDates = (updates) => {
  const dateSet = new Set(updates.map(u => u.date.slice(0, 10)));
  return Array.from(dateSet).sort((a, b) => b.localeCompare(a));
};

// Helper to get all posts for a given date
const getPostsByDate = (updates, date) => {
  const tools = updates.filter(u => u.date.startsWith(date) && u.type === 'tools');
  const news = updates.filter(u => u.date.startsWith(date) && u.type === 'news');
  return { tools, news };
};

// Main Page Component
export default function HomePage() {
  const allDates = getUniqueDates(content.daily_updates);
  const [selectedDate, setSelectedDate] = useState(allDates[0]);
  const [archiveOpen, setArchiveOpen] = useState(false);

  const { tools, news } = getPostsByDate(content.daily_updates, selectedDate);

  return (
    <>
      <header style={{ textAlign: 'center', color: '#2c3e50', marginBottom: '30px', padding: '20px 0 0 0' }}>
        <h1>AI Insights Daily</h1>
        <p>Your daily digest of trending AI tools and news, updated automatically.</p>
      </header>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 25, gap: 10, flexWrap: 'wrap' }}>
        <div style={{ color: '#555', fontSize: '0.95rem', fontStyle: 'italic', background: 'none', borderRadius: 0, boxShadow: 'none', padding: 0, margin: 0 }}>
          {content.last_updated ? `Latest Update: ${content.last_updated}` : ''}
        </div>
        <div style={{ display: 'flex', alignItems: 'center', gap: 10, background: 'none', borderRadius: 0, boxShadow: 'none', padding: 0, margin: 0 }}>
          <label htmlFor="date-select" style={{ fontWeight: 'bold' }}>Viewing Digest For:</label>
          <select
            id="date-select"
            value={selectedDate}
            onChange={e => setSelectedDate(e.target.value)}
            style={{ padding: '6px 12px', borderRadius: '6px', border: '1px solid #ddd', background: 'white', cursor: 'pointer' }}
          >
            {allDates.map(date => (
              <option key={date} value={date}>{date}</option>
            ))}
          </select>
          <button onClick={() => setArchiveOpen(true)} style={{ padding: '6px 12px', borderRadius: '6px', border: '1px solid #ddd', background: '#f8f9fa', cursor: 'pointer' }}>
            Archive
          </button>
        </div>
      </div>
      {/* Archive Modal */}
      {archiveOpen && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', zIndex: 1000, display: 'flex', alignItems: 'center', justifyContent: 'center' }} onClick={() => setArchiveOpen(false)}>
          <div style={{ background: 'white', borderRadius: 12, padding: 24, minWidth: 280, maxHeight: '80vh', overflowY: 'auto', boxShadow: '0 8px 25px rgba(0,0,0,0.15)' }} onClick={e => e.stopPropagation()}>
            <h2 style={{ marginBottom: 16, fontSize: '1.2rem', color: '#333' }}>Archive</h2>
            <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>
              {allDates.map(date => (
                <li key={date} style={{ marginBottom: 8 }}>
                  <button
                    style={{ background: date === selectedDate ? '#667eea' : '#f8f9fa', color: date === selectedDate ? 'white' : '#333', border: 'none', borderRadius: 6, padding: '6px 12px', cursor: 'pointer', width: '100%' }}
                    onClick={() => { setSelectedDate(date); setArchiveOpen(false); }}
                  >
                    {date}
                  </button>
                </li>
              ))}
            </ul>
            <button onClick={() => setArchiveOpen(false)} style={{ marginTop: 16, padding: '6px 12px', borderRadius: 6, border: '1px solid #ddd', background: '#f8f9fa', cursor: 'pointer', width: '100%' }}>Close</button>
          </div>
        </div>
      )}
      <div style={styles.mainContent}>
        <div style={styles.leftColumn}>
          <CollapsibleSection title="📰 News" defaultCollapsed={false}>
            {news.length === 0 ? <div style={{ color: '#888' }}>No news for this date.</div> : news.map((item, index) => (
              <div key={index} style={styles.item}>
                <h2 style={styles.itemTitle}>{item.title}</h2>
                <div style={styles.itemMeta}>
                  <span style={{ ...styles.badge, ...badgeStyles.News }}>News</span>
                  {item.source && <span style={{ ...styles.badge, ...badgeStyles.Source }}>{item.source}</span>}
                  {item.published && <span>Published: {item.published}</span>}
                </div>
                <p style={styles.itemDescription}>{item.description}</p>
                <a href={item.url} target="_blank" rel="noopener noreferrer" style={styles.itemLink}>Read Article →</a>
              </div>
            ))}
          </CollapsibleSection>
          <CollapsibleSection title="🛠️ Tools" defaultCollapsed={false}>
            {tools.length === 0 ? <div style={{ color: '#888' }}>No tools for this date.</div> : tools.map((item, index) => (
              <div key={index} style={styles.item}>
                <h2 style={styles.itemTitle}>{item.title || item.name}</h2>
                <div style={styles.itemMeta}>
                  <span style={{ ...styles.badge, ...badgeStyles.Tool }}>Tool</span>
                  {item.category && <span style={{ ...styles.badge, ...badgeStyles.Category }}>{item.category}</span>}
                  {item.source && <span style={{ ...styles.badge, ...badgeStyles.Source }}>{item.source}</span>}
                  {item.published && <span>Published: {item.published}</span>}
                  {item.status && <span>Status: {item.status}</span>}
                </div>
                <p style={styles.itemDescription}>{item.description}</p>
                <a href={item.url} target="_blank" rel="noopener noreferrer" style={styles.itemLink}>View More →</a>
              </div>
            ))}
          </CollapsibleSection>
        </div>
      </div>
    </>
  );
}

// Inline styles for encapsulation
const styles = {
  header: { textAlign: 'center' as const, color: '#2c3e50', marginBottom: '30px' },
  updateSummary: { textAlign: 'center' as const, color: '#555', fontSize: '0.9rem', marginBottom: '25px', fontStyle: 'italic' as const },
  dateNavigator: { display: 'flex', justifyContent: 'center' as const, alignItems: 'center', marginBottom: '25px', gap: '10px' },
  dateSelect: { padding: '5px 10px', borderRadius: '6px', border: '1px solid #ddd', background: 'white', cursor: 'not-allowed' },
  section: { background: 'white', marginBottom: '20px', borderRadius: '12px', boxShadow: '0 8px 25px rgba(0,0,0,0.08)', overflow: 'hidden' },
  sectionHeader: { background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white', padding: '12px 20px', fontSize: '1.15rem', fontWeight: 'bold' as const, cursor: 'pointer', display: 'flex', justifyContent: 'space-between' as const, alignItems: 'center' },
  sectionContent: { padding: '20px', transition: 'max-height 0.5s ease-in-out, opacity 0.3s ease', maxHeight: '10000px', opacity: 1 },
  collapsedContent: { maxHeight: 0, opacity: 0, padding: '0 20px' },
  item: { borderBottom: '1px solid #eee', padding: '18px 0', transition: 'background-color 0.3s ease' },
  itemTitle: { fontSize: '1.1rem', fontWeight: 'bold' as const, color: '#333', marginBottom: '8px' },
  itemMeta: { display: 'flex', gap: '15px', marginBottom: '8px', fontSize: '0.85rem', color: '#666', flexWrap: 'wrap' as const, alignItems: 'center' },
  itemScores: { display: 'flex', gap: '12px', marginBottom: '8px', flexWrap: 'wrap' as const },
  score: { background: '#e3f2fd', padding: '4px 8px', borderRadius: '15px', fontSize: '0.75rem', color: '#1976d2' },
  itemDescription: { color: '#666', lineHeight: '1.5', fontSize: '0.9rem', margin: '8px 0' },
  itemLink: { color: '#667eea', textDecoration: 'none', fontWeight: 'bold' as const, fontSize: '0.9rem' },
  badge: { padding: '4px 9px', borderRadius: '12px', fontSize: '0.75rem', fontWeight: 'bold' as const, lineHeight: '1' },
  mainContent: { 
    display: 'flex', 
    gap: '20px',
    flexDirection: 'row' as const,
  },
  leftColumn: { flex: 1 },
  rightColumn: { flex: 1 },
};

const badgeStyles = {
  News: { background: '#e3f2fd', color: '#1976d2' },
  Tool: { background: '#f3e5f5', color: '#7b1fa2' },
  Research: { background: '#e8f5e8', color: '#388e3c' },
  Category: { background: '#e0f2f1', color: '#00796b' },
  Source: { background: '#fff3e0', color: '#f57c00' },
};