/**
 * AI Insights Daily - Main Page Component
 * 
 * This is the primary page component for the AI Insights Daily website.
 * It displays a chronological feed of daily AI tools and news updates,
 * automatically generated from the backend discovery system.
 * 
 * Key Features:
 * - Responsive design with dark/light mode support
 * - Chronological display of daily updates
 * - Automatic grouping of news and tools by date
 * - Collapsible sections for better UX
 * - SEO-optimized structure
 * 
 * The component processes content from the data/content.ts file,
 * which is automatically generated by the Python backend scripts.
 * 
 * Author: AI Insights Daily Team
 * Version: 3.1.0
 * Last Updated: June 2025
 */

"use client";

import React, { useState } from 'react';
import { content } from '../data/content';

// Add these types at the top of your file

type NewsItem = {
  title: string;
  url: string;
  source?: string;
  published?: string;
  description?: string;
};

type ToolItem = {
  name?: string;
  title?: string;
  url: string;
  category?: string;
  source?: string;
  published?: string;
  status?: string;
  description?: string;
};

type DailyUpdate = {
  date: string;
  type: string; // 'news' or 'tools'
  title: string;
  data: (NewsItem | ToolItem)[];
};

// Helper to get unique dates in descending order
const getUniqueDates = (updates: DailyUpdate[]): string[] => {
  const dateSet = new Set(updates.map(u => u.date.slice(0, 10)));
  return Array.from(dateSet).sort((a, b) => b.localeCompare(a));
};

// Helper to get all posts for a given date
const getPostsByDate = (updates: DailyUpdate[], date: string) => {
  const tools = updates.filter(u => u.date.startsWith(date) && u.type === 'tools');
  const news = updates.filter(u => u.date.startsWith(date) && u.type === 'news');
  return { tools, news };
};

// Main Page Component
export default function HomePage() {
  const allDates = getUniqueDates(content.daily_updates);
  const [selectedDate, setSelectedDate] = useState(allDates[0]);
  const [archiveOpen, setArchiveOpen] = useState(false);

  const { tools, news } = getPostsByDate(content.daily_updates, selectedDate);

  return (
    <div style={{ maxWidth: 1400, margin: '0 auto', padding: 20 }}>
      <header style={{ textAlign: 'center', color: '#2c3e50', marginBottom: 18, padding: '20px 0 0 0', background: 'none' }}>
        <h1 style={{ fontSize: '2.2rem', fontWeight: 700, margin: 0, letterSpacing: '-1px' }}>AI Insights Daily</h1>
        <p style={{ fontSize: '1.1rem', color: '#666', margin: 0, marginTop: 6 }}>Your daily digest of trending AI tools and news, updated automatically.</p>
      </header>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 18, gap: 10, flexWrap: 'wrap' }}>
        <div style={{ color: '#555', fontSize: '0.95rem', fontStyle: 'italic', background: 'none', padding: 0, margin: 0 }}>{content.last_updated ? `Latest Update: ${content.last_updated}` : ''}</div>
        <div style={{ display: 'flex', alignItems: 'center', gap: 10, background: 'none', padding: 0, margin: 0 }}>
          <label htmlFor="date-select" style={{ fontWeight: 'bold' }}>Viewing Digest For:</label>
          <select
            id="date-select"
            value={selectedDate}
            onChange={e => setSelectedDate(e.target.value)}
            style={{ padding: '6px 12px', borderRadius: '6px', border: '1px solid #ddd', background: 'white', cursor: 'pointer' }}
          >
            {allDates.map(date => (
              <option key={date} value={date}>{date}</option>
            ))}
          </select>
          <button onClick={() => setArchiveOpen(true)} style={{ padding: '6px 12px', borderRadius: '6px', border: '1px solid #ddd', background: '#f8f9fa', cursor: 'pointer' }}>Archive</button>
        </div>
      </div>
      {archiveOpen && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', zIndex: 1000, display: 'flex', alignItems: 'center', justifyContent: 'center' }} onClick={() => setArchiveOpen(false)}>
          <div style={{ background: 'white', borderRadius: 12, padding: 24, minWidth: 280, maxHeight: '80vh', overflowY: 'auto', boxShadow: '0 8px 25px rgba(0,0,0,0.15)' }} onClick={e => e.stopPropagation()}>
            <h2 style={{ marginBottom: 16, fontSize: '1.2rem', color: '#333' }}>Archive</h2>
            <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>
              {allDates.map(date => (
                <li key={date} style={{ marginBottom: 8 }}>
                  <button
                    style={{ background: date === selectedDate ? '#667eea' : '#f8f9fa', color: date === selectedDate ? 'white' : '#333', border: 'none', borderRadius: 6, padding: '6px 12px', cursor: 'pointer', width: '100%' }}
                    onClick={() => { setSelectedDate(date); setArchiveOpen(false); }}
                  >
                    {date}
                  </button>
                </li>
              ))}
            </ul>
            <button onClick={() => setArchiveOpen(false)} style={{ marginTop: 16, padding: '6px 12px', borderRadius: 6, border: '1px solid #ddd', background: '#f8f9fa', cursor: 'pointer', width: '100%' }}>Close</button>
          </div>
        </div>
      )}
      <div style={{ display: 'flex', gap: 20, flexDirection: 'row', alignItems: 'flex-start' }}>
        <div style={{ flex: 1 }}>
          <h2 style={{ fontSize: '1.15rem', fontWeight: 600, color: '#333', marginBottom: 10, marginTop: 0 }}>News</h2>
          {news.length === 0 || !news[0].data.length ? <div style={{ color: '#888' }}>No news for this date.</div> : (news[0].data as NewsItem[]).map((item, index) => (
            <div key={index} style={{ borderBottom: '1px solid #eee', padding: '16px 0' }}>
              <div style={{ fontWeight: 600, fontSize: '1.05rem', color: '#222', marginBottom: 4 }}>{item.title}</div>
              <div style={{ fontSize: '0.92rem', color: '#666', marginBottom: 4 }}>
                {item.source && <span style={{ marginRight: 10 }}>{item.source}</span>}
                {item.published && <span style={{ marginRight: 10 }}>Published: {item.published}</span>}
              </div>
              <div style={{ color: '#666', fontSize: '0.95rem', margin: '6px 0' }}>{item.description}</div>
              <a href={item.url} target="_blank" rel="noopener noreferrer" style={{ color: '#667eea', textDecoration: 'none', fontWeight: 600, fontSize: '0.97rem' }}>Read Article →</a>
            </div>
          ))}
          <h2 style={{ fontSize: '1.15rem', fontWeight: 600, color: '#333', marginBottom: 10, marginTop: 32 }}>Tools</h2>
          {tools.length === 0 || !tools[0].data.length ? <div style={{ color: '#888' }}>No tools for this date.</div> : (tools[0].data as ToolItem[]).map((item, index) => (
            <div key={index} style={{ borderBottom: '1px solid #eee', padding: '16px 0' }}>
              <div style={{ fontWeight: 600, fontSize: '1.05rem', color: '#222', marginBottom: 4 }}>{item.title || item.name}</div>
              <div style={{ fontSize: '0.92rem', color: '#666', marginBottom: 4 }}>
                {item.category && <span style={{ marginRight: 10 }}>{item.category}</span>}
                {item.source && <span style={{ marginRight: 10 }}>{item.source}</span>}
                {item.published && <span style={{ marginRight: 10 }}>Published: {item.published}</span>}
                {item.status && <span style={{ marginRight: 10 }}>Status: {item.status}</span>}
              </div>
              <div style={{ color: '#666', fontSize: '0.95rem', margin: '6px 0' }}>{item.description}</div>
              <a href={item.url} target="_blank" rel="noopener noreferrer" style={{ color: '#667eea', textDecoration: 'none', fontWeight: 600, fontSize: '0.97rem' }}>View More →</a>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}